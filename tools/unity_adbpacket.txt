<?xml version="1.0" encoding="utf-8"?>  
    <!--  
  byread Package Utility  
  Author: Jojol Zhou  
  Date: 20100804  
    -->  
<project name="magicp" default="release">  
    <!-- SDK Locations -->  
    <property name="sdk-folder" value="D:\adt\sdk"/>  
    <property name="sdk-tools" value="${sdk-folder}/build-tools/25.0.1" />  
    <property name="sdk-platforms" value="${sdk-folder}/platforms/android-25"/>  
  
        <!-- step 1.generate R.java by aapt  2.compile java to class by javac。exe 3.generate classes.dex by dx.bat  -->  
        <!-- 4.package resources by aapt 5. package resource and classes.dex by apkbuilder.bat 6.sign apk by jarsinger -->  
    <!-- Tools -->  
    <property name="aapt" value="${sdk-tools}/aapt.exe" />  
    <property name="dx" value="${sdk-tools}/dx.bat" />  
    <property name="apk-builder" value="${sdk-folder}/tools/lib/sdklib.jar"/>  
    <property name="aidl" value="${sdk-tools}/aidl.exe" />  
    <property name="adb" value="${android-tools}/adb.exe" />  
    <property name="android-jar" value="${sdk-platforms}/android.jar" />  
    <property name="jarsigner" value="C:\Program Files\Java\jdk1.8.0_171\bin\jarsigner.exe" />  
    <property name="apksigner" value="${sdk-tools}\apksigner.bat" />  
   
    <!-- Application Package Name -->  
    <property name="application-package" value="com.magicp.thelastcrown" />  
    <property name="version" value="1.02" />  
    <!-- The intermediates directory -->  
    <!-- Eclipse uses "bin" for its own output, so we do the same. -->  
    <property name="outdir-bin" value="bin" />  
    <property name="outdir-gen" value="gen" />  
    <!-- source directories -->  
	<property name="resource-dir" value="res" />  
    <property name="asset-dir" value="assets" />  
    <property name="srcdir" value="src" />  
    <property name="srcdir-ospath" value="${basedir}/${srcdir}" />  
    <property name="external-libs" value="libs" />  
    <property name="external-libs-ospath" value="${basedir}/${external-libs}" />  
      
    <!-- dest directories -->  
    <property name="des-resource-dir" value="${outdir-bin}/res" />  
    <property name="des-asset-dir" value="${outdir-bin}/assets" />  
    <property name="des-srcdir" value="${outdir-bin}/src" />  
    <property name="des-srcdir-ospath" value="${basedir}/${outdir-bin}/${srcdir}" />  
    <property name="des-external-libs" value="${outdir-bin}/libs" />  
    <property name="des-external-libs-ospath" value="${basedir}/${outdir-bin}/${external-libs}" />  
      
    <!-- Output directories -->     
	<property name="outdir-classes" value="${outdir-bin}/src" />  
    <!-- <property name="outdir-obfuscate-classes" value="${outdir-bin}/classes" />   -->
     <property name="outdir-obfuscate-classes" value="${outdir-classes}" />  
    <property name="outdir-obfuscate-classes-ospath" value="${basedir}/${outdir-obfuscate-classes}" />  
  
    <!-- Intermediate files -->  
    <property name="dex-file" value="classes.dex" />  
    <property name="intermediate-dex" value="${outdir-bin}/${dex-file}" />  
    <property name="intermediate-dex-ospath" value="${basedir}/${intermediate-dex}" />  
  
    <!-- The final package file to generate -->  
	<property file="build.properties"/>
    <property name="resources-package" value="${outdir-bin}/${apk-name}" />  
    <property name="resources-package-ospath" value="${basedir}/${resources-package}" />   
    <property name="out-unsigned-package" value="${exportApkDir}/${apk-name}-unsigned.apk" />  
    <property name="out-unsigned-package-ospath" value="${out-unsigned-package}" />  
	<property name="out-signed-package" value="${exportApkDir}\${apk-name}.apk" />  
	<property name="out-signed-package-ospath" value="${out-signed-package}" />  
    <property name="out-signed-package-withTime" value="${exportApkDir}\${apk-name}-${apk-time}.apk" />       
  
    <!-- init -->  
	<target name="init">  
        <echo>Creating all output directories </echo>  
        <delete dir="${outdir-bin}" />       
        <!-- <delete dir="${exportApkDir}" /> -->
          
        <mkdir dir="${outdir-bin}" />  
		<mkdir dir="${outdir-gen}" /> 
        <mkdir dir="${outdir-classes}" />  
        <!-- <mkdir dir="${exportApkDir}" />   -->
    </target>  
    
    <!-- copy unity file to sdk project	 -->
	<target name="copy" depends="init">
		<echo>Copy file from unity project: ${unityProject} ... </echo>
		<delete dir="${asset-dir}/bin"/>
		<delete dir="${asset-dir}/Shader"/>
		<delete dir="${asset-dir}/Video"/>
		<delete file="${external-libs}/armeabi-v7a/libmain.so"/>
		<delete file="${external-libs}/armeabi-v7a/libmono.so"/>
		<delete file="${external-libs}/armeabi-v7a/libunity.so"/>
		<delete file="${external-libs}/x86/libmain.so"/>
		<delete file="${external-libs}/x86/libmono.so"/>
		<delete file="${external-libs}/x86/libunity.so"/>
		<delete file="${external-libs}/unity-classes.jar"/>
		
		<copy todir="${asset-dir}" force="true">
			<fileset dir="${unityProject}/assets">
			<include name="bin/"/>
			<include name="Shader/"/>
			<include name="Video/"/>
			<!-- <include name="sdk_version"/> -->
			<include name="patchserver"/>
			</fileset>
		</copy>		
		<copy todir="${external-libs}" force="true">
			<fileset dir="${unityProject}/libs">
			<include name="armeabi-v7a/"/>
			<include name="x86/"/>
			<include name="unity-classes.jar"/>
			</fileset>
		</copy>
	</target>

    <!-- Generate the R.java file for this project's resources. -->  
    <target name="resource-src" depends="copy">  
        <echo>Generating R.java / Manifest.java from the resources...</echo>  
        <exec executable="${aapt}" failonerror="true">  
                    <arg value="package" /> 
					<arg value="-f" />					
                    <arg value="-m" />  
                    <arg value="-J" />  
                    <arg value="${outdir-gen}" />  
                    <arg value="-M" />  
                    <arg value="AndroidManifest.xml" />  
                    <arg value="-S" />  
                    <arg value="${resource-dir}" />  
                    <arg value="-I" />  
                    <arg value="${android-jar}" />  
                </exec>  
    </target>  
  
  <!--   Generate java classes from .aidl files. -->  
  <!--   <target name="aidl" depends="copy">  
        <echo>Compiling aidl files into Java classes...</echo>  
        <apply executable="${aidl}" failonerror="true">  
            <arg value="-p${aidl}" />  
            <arg value="-I${srcdir}" />  
            <fileset dir="${srcdir}">  
                <include name="**/*.aidl"/>  
            </fileset>  
        </apply>  
    </target>   -->
  
    <!-- Compile this project's .java files into .class files. -->  
    <target name="compile" depends="resource-src">  
        <javac encoding="utf-8" target="1.7" debug="true" extdirs=""  
                srcdir="."  
                destdir="${outdir-classes}"  
                bootclasspath="${android-jar}"
                includeantruntime="false">  
            <classpath>  
                <fileset dir="${external-libs}" includes="*.jar"/>  
            </classpath>  
         </javac>  
    </target>   

    <!-- Convert this project's .class files into .dex files. -->  
    <target name="dex" depends="compile">  
        <echo>Converting compiled files and external libraries into ${outdir}/${dex-file}...</echo>  
        <apply executable="${dx}" failonerror="true" parallel="true">  
            <arg value="--dex" />  
            <arg value="--output=${intermediate-dex-ospath}" />  
            <arg path="${outdir-obfuscate-classes-ospath}" />              
            <fileset dir="${external-libs}" includes="*.jar"/> 
         <!--   <arg path="${outdir-classes}" />  
           <fileset dir="${outdir-classes}" includes="*.class"/>  -->
        </apply>  
    </target>  
  
  <!-- Put the project's resources into the output package file. -->
    <target name="package-res">  
         <exec executable="${aapt}" failonerror="true">  
            <arg value="package" />  
            <arg value="-f" />  
            <arg value="-M" />  
            <arg value="AndroidManifest.xml" />  
            <arg value="-S" />  
            <arg value="${resource-dir}" />  
            <arg value="-A" />  
            <arg value="${asset-dir}" />  
            <arg value="-I" />  
            <arg value="${android-jar}" />  
            <arg value="-F" />  
            <arg value="${resources-package}" />
            <arg value="-0"/>  
            <arg value="unity3d"/>           
        </exec>   
    </target>  

 <!--    Package the application without signing it.  
         This allows for the application to be signed later with an official publishing key.   -->
    <target name="package" depends="dex, package-res">  
        <echo>Packaging ${out-unsigned-package} for release...</echo>  
         <java classpath="${apk-builder}" classname="com.android.sdklib.build.ApkBuilderMain">   
            <arg value="${out-unsigned-package-ospath}" />  
            <arg value="-u" />  
            <arg value="-z" />  
            <arg value="${resources-package-ospath}" />  
            <arg value="-f" />  
            <arg value="${intermediate-dex-ospath}" />  
            <arg value="-rf" />  
            <arg value="${srcdir-ospath}" />  
            <arg value="-rj" />  
            <arg value="${external-libs-ospath}" />  
             <!-- 将主项目libs下面的so库打包  --> 
	        <arg value="-nf" />  
	        <arg value="${external-libs-ospath}" /> 
        </java>  
        <echo>It will need to be signed with jarsigner before being published.</echo>  
    </target>  
     
 <!--  <target name="apksigner" depends="package">  
            <echo>Packaging ${out-unsigned-package} for release...</echo>  
              <exec executable="${apksigner}" failonerror="true">    
                <arg value="-keystore" />  
                <arg value="${keystore}" />  
                <arg value="-alias" />  
                <arg value="${alias}" />  
                <arg value="-pswd" />  
                <arg value="${ksPassword}" />  
                <arg value="-aliaspswd" />  
                <arg value="${alPassword}" />  
                <arg value="${out-unsigned-package-ospath}" />  
            </exec>  
    </target>   -->
        
    <target name="jarsigner" depends="package">  
        <echo>Packaging ${out-unsigned-package} for release...</echo>  
        <exec executable="${jarsigner}" failonerror="true">  
            <arg value="-verbose" />  
            <arg value="-storepass" />  
            <arg value="${ksPassword}" />  
            <arg value="-keypass" />  
            <arg value="${alPassword}" />  
            <arg value="-keystore" />  
            <arg value="${keystore}" />  
            <arg value="-signedjar" />  
            <arg value="${out-signed-package-ospath}" />  
            <arg value="${out-unsigned-package-ospath}" />  
            <arg value="${alias}" />  
        </exec>	
    </target> 
	
    <target name="release" depends="jarsigner"> 
        <delete file="${out-unsigned-package-ospath}"/> 
		<move file="${out-signed-package-ospath}" tofile="${out-signed-package-withTime}"/>
        <echo>release for release...</echo>  
    </target>  
    
</project>  